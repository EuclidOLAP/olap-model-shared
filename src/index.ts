// CREATE TABLE `user` (
//   `user_name` varchar(255) NOT NULL,
//   `pswd_hash` varchar(255) NOT NULL COMMENT 'Hashed password for security.',
//   `is_admin` tinyint(1) DEFAULT '0' COMMENT 'Indicates whether the user is an admin.',
//   `code` varchar(255) DEFAULT NULL COMMENT 'Entity code, can be input by the user or generated by other means.',
//   `alias` varchar(255) DEFAULT NULL COMMENT 'The alias of the entity.',
//   `display` varchar(255) DEFAULT NULL COMMENT 'The display name of the entity, similar to a secondary alias.',
//   `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'The time when the entity was created.',
//   `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'The time when the entity was last modified.',
//   `created_by` bigint unsigned DEFAULT '0' COMMENT 'The ID of the user who created the entity.',
//   `updated_by` bigint unsigned DEFAULT '0' COMMENT 'The ID of the user who last modified the entity.',
//   `description` text COMMENT 'Description of the entity.',
//   `ext_field_1` varchar(255) DEFAULT NULL,
//   `ext_field_2` varchar(255) DEFAULT NULL,
//   `ext_field_3` varchar(255) DEFAULT NULL,
//   `ext_field_4` varchar(255) DEFAULT NULL,
//   `ext_field_5` varchar(255) DEFAULT NULL,
//   `ext_field_6` varchar(255) DEFAULT NULL,
//   `ext_field_7` varchar(255) DEFAULT NULL,
//   `ext_field_8` varchar(255) DEFAULT NULL,
//   `ext_field_9` varchar(255) DEFAULT NULL,
//   `ext_field_10` varchar(255) DEFAULT NULL,
//   PRIMARY KEY (`user_name`)
// ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
export interface User {
  user_name: string;
  pswd_hash: string;
  is_admin: boolean;
  created_at?: Date;
  updated_at?: Date;
  created_by?: number;
  updated_by?: number;
  description?: string;
}

// CREATE TABLE `cube` (
//   `gid` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'Global unique identifier, representing the multidimensional domain model entity.',
//   `code` varchar(255) DEFAULT NULL COMMENT 'Entity code, can be input by the user or generated by other means.',
//   `name` varchar(255) NOT NULL COMMENT 'The official name of the entity.',
//   `alias` varchar(255) DEFAULT NULL COMMENT 'The alias of the entity.',
//   `display` varchar(255) DEFAULT NULL COMMENT 'The display name of the entity, similar to a secondary alias.',
//   `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'The time when the entity was created.',
//   `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'The time when the entity was last modified.',
//   `created_by` bigint unsigned DEFAULT '0' COMMENT 'The ID of the user who created the entity.',
//   `updated_by` bigint unsigned DEFAULT '0' COMMENT 'The ID of the user who last modified the entity.',
//   `description` text COMMENT 'Description of the entity.',
//   PRIMARY KEY (`gid`)
// ) ENGINE=InnoDB AUTO_INCREMENT=500000000000008 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
export interface Cube {
  gid?: number; // 主键，自增
  code?: string; // 可选，实体编码
  name: string; // 实体名称
  alias?: string; // 可选别名
  display?: string; // 可选展示名
  created_at?: Date; // 创建时间
  updated_at?: Date; // 更新时间
  created_by?: number; // 创建人ID
  updated_by?: number; // 更新人ID
  description?: string; // 描述
}

// #####################################################################################
// ##                            Start for defining Member                            ##
// #####################################################################################

export interface Member {
  gid: number;
  code?: string;
  name: string;
  alias?: string;
  display?: string;
  dimensionGid: number;
  hierarchyGid: number;
  levelGid: number;
  level: number;
  parentGid: number;
  measureIndex: number;
  leaf: boolean;
  fullPath: Uint8Array;
  // created_at?: Date;
  // updated_at?: Date;
  created_by?: number;
  updated_by?: number;
  description?: string;
}

// #####################################################################################
// ##                            End for defining Member                              ##
// #####################################################################################

// CREATE TABLE `user_olap_model_access` ( `id` BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '' , --
//  `user_name` VARCHAR(255) NOT NULL COMMENT '' , --
//  `permission_scope` VARCHAR(255) COMMENT 'Describes the scope of the permission, e.g., cube, dimensionRole, or member(role).' , -- Describes the scope of the permission, e.g., cube, dimensionRole, or member(role).
//  `dimension_role_gid` BIGINT UNSIGNED COMMENT 'When the value of this field is meaningful, it indicates that the entity access permissions are set within the scope of this dimension role.' , -- 当此字段值有意义时，表示是在此维度角色范围内设置实体访问权限。
//  `olap_entity_gid` BIGINT UNSIGNED NOT NULL COMMENT '' , --
//  `has_access` BOOLEAN DEFAULT FALSE COMMENT '' , --
//  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'The time when the entity was created.' , -- 实体被创建的时间。
//  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'The time when the entity was last modified.' , -- 实体最新被修改的时间。
//  `created_by` BIGINT UNSIGNED DEFAULT 0 COMMENT 'The ID of the user who created the entity.' , -- 创建实体的用户的ID。
//  `updated_by` BIGINT UNSIGNED DEFAULT 0 COMMENT 'The ID of the user who last modified the entity.' , -- 最后修改实体的用户的ID。
//  `description` TEXT COMMENT 'Description of the entity.' , -- 实体的描述信息。
//  `ext_field_1` VARCHAR(255), `ext_field_2` VARCHAR(255), `ext_field_3` VARCHAR(255), `ext_field_4` VARCHAR(255), `ext_field_5` VARCHAR(255), `ext_field_6` VARCHAR(255), `ext_field_7` VARCHAR(255), `ext_field_8` VARCHAR(255), `ext_field_9` VARCHAR(255),
//  `ext_field_10` VARCHAR(255)
//  ) ;
export interface UserOlapModelAccess {
  id: number;
  user_name: string;
  permission_scope?: string;
  dimension_role_gid?: number;
  olap_entity_gid: number;
  has_access: boolean;

  // does not in DB table
  full_path_text?: string;

  // getFullPathText(): string;
}

// 定义 enum 和方法都在一个 class 中
export class OlapEntityTypeChecker {
  // enum 放在 class 中
  static enum = {
    Member: 3,
    CalculatedMetric: 7,
  } as const;

  // 明确指定返回类型为 number
  static check(olap_obj_gid: number): number {
    if (olap_obj_gid >= 700000000000001) {
      return OlapEntityTypeChecker.enum.CalculatedMetric;
    } else if (olap_obj_gid >= 300000000000001) {
      return OlapEntityTypeChecker.enum.Member;
    }

    // 抛出异常：无效的 olap_obj_gid
    throw new Error(
      `Invalid olap_obj_gid: ${olap_obj_gid}. The value does not match any valid type.`
    );
  }
}

export class ResponseResult {
  success: boolean;
  message: string;
  data: any;
  error: any;

  private constructor(
    success: boolean,
    message: string,
    data: any = null,
    error: any = null
  ) {
    this.success = success;
    this.message = message;
    this.data = data;
    this.error = error;
  }

  static ok(data: any, message: string = "successful"): ResponseResult {
    return new ResponseResult(true, message, data);
  }

  static err(error: any = null, message: string = "failed"): ResponseResult {
    return new ResponseResult(false, message, null, error);
  }
}
